#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'optparse'

require 'mud'

renderer_name = 'ThreeJS'
OptionParser.new do |opts|
  opts.banner = 'Usage: Runs the demo of mud forms and renderers'

  opts.on('-rRENDERER', '--renderer RENDERER', 'One of SVG, STL, or ThreeJS') do |r|
    renderer_name = r
  end
end.parse!

renderer = {
  'SVG' => Mud::Renderer::SVG.new,
  'STL' => Mud::Renderer::STL.new,
  'ThreeJS' => Mud::Renderer::ThreeJS.new,
}[renderer_name]

raise 'No Such Renderer (try "SVG")' unless renderer

size = 500000
side = (size ** (1/3.0)).ceil
min_island = (side / 5).ceil

STDERR.puts "side: #{side} minimum island: #{min_island}"

half = side / 2.0

noises = Mud::Forms::Noise.new(side, 2, 0.5)
sphere = Mud::Forms::NSphere.new(half, 2)
moved = Mud::Forms::Arrange.new(noises, [0, 0], sphere.bounds)
base = Mud::Forms::And.new(sphere, moved)

converged = Mud::Filters.converge(base)
smoothed = Mud::Filters.smooth(converged, 3, 7)
ready = Mud::Forms::Islands.new(smoothed, 3, min_island)

if renderer.dimensions == 2
  renderer.render(ready)
  exit
end

lis = [ready]
side.times.each do
  converged = Mud::Filters.converge(lis[-1])
  # smoothed = Mud::Filters.smooth(converged, 3, 7)
  ready = Mud::Forms::Islands.new(converged, 3)
  lis << ready
end

stack = Mud::Forms::Layers.new(lis)
nudged = Mud::Forms::Arrange.new(stack, [2, 2, 2], stack.bounds.map { |b| b + 4 })
ready = Mud::Forms::Memo.new(nudged)

renderer.render(ready)

